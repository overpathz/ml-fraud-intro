import numpy as np
import joblib
from datetime import datetime


class FraudDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ—Ä–æ–¥–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"""

    def __init__(self, model_path='models/fraud_model.joblib'):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        try:
            self.model = joblib.load(model_path)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ {model_path}")
        except FileNotFoundError:
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {model_path}")
            print("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å: python train_model.py")
            raise

    def extract_features(self, text):
        """–í–∏—Ç—è–≥—É—î –æ–∑–Ω–∞–∫–∏ –∑ —Ç–µ–∫—Å—Ç—É (–ø–æ–≤—Ç–æ—Ä—é—î –ª–æ–≥—ñ–∫—É –∑ train_model.py)"""
        text = text.strip()
        text_lower = text.lower()

        sql_keywords = ['select', 'drop', 'insert', 'update', 'delete',
                        'union', 'where', 'from', 'table', 'database']
        html_js_patterns = ['script', 'iframe', 'img', 'svg', 'body',
                            'onload', 'onerror', 'alert', 'eval']
        path_patterns = ['../', './', 'etc/', 'windows/', 'system32']

        features = [
            len(text), text.count(' '), text.count("'"), text.count('"'),
            text.count('<'), text.count('>'), text.count('='),
            text.count(';'), text.count('-'), text.count('('), text.count('/'),
            sum([1 for word in sql_keywords if word in text_lower]),
            sum([1 for pattern in html_js_patterns if pattern in text_lower]),
            sum([1 for pattern in path_patterns if pattern in text_lower]),
        ]

        return features

    def predict(self, request_text, threshold=0.5):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–ø–∏—Ç –Ω–∞ —Ñ—Ä–æ–¥"""
        features = np.array([self.extract_features(request_text)])

        # –û—Ç—Ä–∏–º—É—î–º–æ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
        probabilities = self.model.predict_proba(features)[0]
        fraud_probability = probabilities[1]

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Ä–∏–∑–∏–∫—É
        if fraud_probability < 0.3:
            risk_level = "–ù–ò–ó–¨–ö–ò–ô"
            emoji = "üü¢"
        elif fraud_probability < 0.7:
            risk_level = "–°–ï–†–ï–î–ù–Ü–ô"
            emoji = "üü°"
        else:
            risk_level = "–í–ò–°–û–ö–ò–ô"
            emoji = "üî¥"

        result = {
            'request': request_text,
            'is_fraud': fraud_probability > threshold,
            'fraud_probability': round(fraud_probability, 3),
            'normal_probability': round(probabilities[0], 3),
            'risk_level': risk_level,
            'emoji': emoji,
            'timestamp': datetime.now().isoformat()
        }

        return result

    def check_request(self, request_text, threshold=0.5, verbose=True):
        """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ –≤–∏–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        result = self.predict(request_text, threshold)

        if verbose:
            print(f"{result['emoji']} –ó–∞–ø–∏—Ç: '{request_text}'")
            print(f"üìä –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ñ—Ä–æ–¥—É: {result['fraud_probability']:.1%}")
            print(f"‚ö†Ô∏è –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {result['risk_level']}")
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–§–†–û–î' if result['is_fraud'] else '–ë–ï–ó–ü–ï–ß–ù–û'}")

        return result


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ API
detector = None


def get_detector():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global detector
    if detector is None:
        detector = FraudDetector()
    return detector