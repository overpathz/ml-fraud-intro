from fraud_detector import FraudDetector
import json


def test_basic_functionality():
    """–û—Å–Ω–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""

    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Fraud Detector")
    print("=" * 50)

    try:
        detector = FraudDetector()
    except FileNotFoundError:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python train_model.py")
        return

    # –ù–∞–±—ñ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    test_requests = [
        # –ù–æ—Ä–º–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏
        "–ø–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "–ø–æ—à—É–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞",
        "–∑–º—ñ–Ω–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ",
        "—ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å",

        # –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ –ª–µ–≥—ñ—Ç–∏–º–Ω—ñ
        "–ø–æ—à—É–∫ –ø–æ —Å–ª–æ–≤—É 'select'",
        "—Ç–æ–≤–∞—Ä –∑ –Ω–∞–∑–≤–æ—é <strong>–≤–∞–∂–ª–∏–≤–∏–π</strong>",

        # –Ø–≤–Ω–æ —Ñ—Ä–æ–¥–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        "' OR '1'='1",
        "<script>alert('hack')</script>",
        "admin' UNION SELECT password FROM users--",
        "../../../etc/passwd",
        "'; DROP TABLE products; --"
    ]

    print("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:\n")

    for i, request_text in enumerate(test_requests, 1):
        print(f"üîç –¢–µ—Å—Ç {i}:")
        result = detector.check_request(request_text)
        print("-" * 40)


def create_test_file():
    """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –≤–∏–ø–∞–¥–∫–∞–º–∏"""
    test_cases = [
        {"request": "–ø–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "expected_fraud": False},
        {"request": "' OR 1=1 --", "expected_fraud": True},
        {"request": "–ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤", "expected_fraud": False},
        {"request": "<script>alert('xss')</script>", "expected_fraud": True},
        {"request": "–∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å", "expected_fraud": False},
        {"request": "../admin/config.php", "expected_fraud": True},
        {"request": "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "expected_fraud": False},
    ]

    with open('data/test_requests.json', 'w', encoding='utf-8') as f:
        json.dump(test_cases, f, ensure_ascii=False, indent=2)

    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª data/test_requests.json")


def test_from_file():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É —Ç–µ—Å—Ç–æ–≤–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤"""
    try:
        with open('data/test_requests.json', 'r', encoding='utf-8') as f:
            test_cases = json.load(f)
    except FileNotFoundError:
        print("–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª...")
        create_test_file()
        return test_from_file()

    print(f"\nüìÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {len(test_cases)} –≤–∏–ø–∞–¥–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É")
    print("=" * 50)

    detector = FraudDetector()
    correct = 0

    for case in test_cases:
        request_text = case['request']
        expected = case['expected_fraud']

        result = detector.predict(request_text)
        actual = result['is_fraud']

        if actual == expected:
            correct += 1
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û"
        else:
            status = "‚ùå –ü–û–ú–ò–õ–ö–ê"

        print(f"{status}: '{request_text}'")
        print(f"   –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected}, –û—Ç—Ä–∏–º–∞–Ω–æ: {actual}")
        print(f"   –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ñ—Ä–æ–¥—É: {result['fraud_probability']:.1%}")
        print()

    accuracy = correct / len(test_cases)
    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: {accuracy:.1%} ({correct}/{len(test_cases)})")


if __name__ == "__main__":
    test_basic_functionality()
    test_from_file()